import {
  CellsType,
  EffectsType,
  makeCellAutoGenerated,
  makeCellNavigable,
  makeCellReactive,
} from './make_cell_reactive'
import {
  DimensionsType,
  SheetDataType,
  SheetType,
  asRef,
  colAsLabel,
  expandRange,
  generateSpiralSequence,
  loadSheet,
  repeat,
  sheetDimensions,
} from './spreadsheet_utils'
import './style.css'

// Spiral Fibonacci sequence.
const sheetData: SheetDataType = generateSpiralSequence(
  20,
  'south',
  'left',
  [{ A1: 0 }, { A2: 1 }],
  (_i, previousRefs, _nextRef) => `=${previousRefs[previousRefs.length - 2]}+${previousRefs[previousRefs.length - 1]}`
)

const sheet: SheetType = loadSheet(sheetData)
const dimensions: DimensionsType = sheetDimensions(sheet)

const columnLabels = repeat(dimensions.cols, col => `<th>${colAsLabel(col + 1)}</th>`)

const template = `
  <table>
    <tr>
      <th></th>
      ${columnLabels}
      <th></th>
    </tr>
    ${repeat(
      dimensions.rows,
      row =>
        '<tr>' +
        `<td><bold>${row + 1}</bold></td>` +
        repeat(
          dimensions.cols,
          col =>
            '<td>' +
            `<input size="${Math.max(2, window.innerWidth / dimensions.cols) / 15}" id='${asRef([
              row + 1,
              col + 1,
            ])}'/>` +
            '</td>'
        ) +
        `<td><bold>${row + 1}</bold></td>` +
        '</tr>'
    )}
    <tr>
      <th></th>
      ${columnLabels}
      <th></th>
    </tr>
  </table>
`

document.querySelector<HTMLDivElement>('#app')!.innerHTML = template

const effects: EffectsType = {}
const refs = expandRange('A1', asRef([dimensions.rows, dimensions.cols])).flat(2)
const cells: CellsType = refs.reduce(
  (acc, ref) => ({ ...acc, [ref]: document.querySelector<HTMLInputElement>(`#${ref}`) }),
  {}
)

Object.entries(cells).forEach(([ref, el]) => {
  if (ref in sheet) makeCellReactive(ref, el, sheet, cells, effects)
  else makeCellAutoGenerated(ref, el, sheet, cells, effects)

  makeCellNavigable(ref, el, sheet, cells, dimensions)
})

cells['A1'].click()
